version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE:-grading_system_pg}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-grading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-grading_system_mongo}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - ai-grading-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/${MONGODB_DATABASE:-grading_system_mongo} --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Main AI Grading Application
  ai-grading-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-grading_system_pg}
      
      # MongoDB Configuration
      - MONGODB_HOST=${MONGODB_HOST:-mongodb}
      - MONGODB_PORT=${MONGODB_PORT:-27017}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-grading_system_mongo}
      
      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      
      # Application Configuration
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./server_data:/app/server_data
      - ./static:/app/static
      - ./templates:/app/templates
      - ./grading-fastapi:/app/grading-fastapi
      - ./training_data:/app/training_data
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ai-grading-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production HTTPS)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-grading-app
    networks:
      - ai-grading-network
    restart: unless-stopped
    profiles:
      - production

networks:
  ai-grading-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  server_data:
  static_files:
  templates:
